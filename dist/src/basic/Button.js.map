{"version":3,"sources":["../../../src/basic/Button.js"],"names":["Button","borderedBtn","borderWidth","props","bordered","undefined","borderRadius","rounded","borderRadiusLarge","defaultProps","style","getInitialStyle","OS","androidRipple","Version","prepareRootProps","c","_root","activeOpacity","children","onPress","androidRippleColor","Ripple","propTypes","PropTypes","object","block","bool","primary","transparent","success","danger","warning","info","capitalize","disabled","large","small","active","badgeColor","string","badgeValueStyle","StyledButton"],"mappings":";;AAEA,4B;AACA;AACA;AACA,uD;AACA,mD;;AAEA,mE;;AAEMA,M;;AAEc;AAChB,MAAO;AACLC,YAAa;AACXC,YAAc,KAAKC,KAAL,CAAWC,QAAZ,CAAwB,CAAxB,CAA4BC,SAD9B;AAEXC,aAAe,KAAKH,KAAL,CAAWI,OAAX,EAAsB,KAAKJ,KAAL,CAAWC,QAAlC,CAA8C,mBAAUI,iBAAxD,CAA4E,CAF/E,CADR,CAAP;;;AAMD,C;;AAEkB;AACjB,GAAMC,cAAe;AACnBC,MAAO,KAAKC,eAAL,GAAuBV,WADX,CAArB;;;AAIA,MAAO,2BAAa,KAAKE,KAAlB,CAAyBM,YAAzB,CAAP;AACD,C;AACQ;AACP,GAAI,sBAASG,EAAT,GAAgB,KAAhB,EAAyB,mBAAUC,aAAV,GAA4B,KAArD,EAA8D,sBAASC,OAAT,EAAoB,EAAtF,CAA0F;AACxF;AACE;AACM,KAAKC,gBAAL,EADN;AAEE,IAAK,aAACC,CAAD,CAAO,CAAE,OAAKC,KAAL,CAAaD,CAAb,CAAiB,CAFjC;AAGE,cAAgB,KAAKb,KAAL,CAAWe,aAAZ,CAA6B,KAAKf,KAAL,CAAWe,aAAxC,CAAwD,GAHzE;;AAKG,KAAKf,KAAL,CAAWgB,QALd,CADF;;;AASD;AACD;AACE;AACE,IAAK,aAACH,CAAD,CAAO,CAAE,OAAKC,KAAL,CAAaD,CAAb,CAAiB,CADjC;AAEE,QAAS,KAAKb,KAAL,CAAWiB,OAFtB;AAGE;AACG,KAAKjB,KAAL,CAAWkB,kBAAZ;AACA,qCAAwBC,MAAxB,CAA+B,KAAKnB,KAAL,CAAWkB,kBAA1C,CADA;;AAGA,qCAAwBC,MAAxB,CAA+B,mBAAUD,kBAAzC,CAPJ;AAQM,KAAKN,gBAAL,EARN;;AAUE,gDAAU,KAAKA,gBAAL,EAAV;AACK,KAAKZ,KAAL,CAAWgB,QADhB,CAVF,CADF;;;;AAgBD,C;;;AAGHnB,OAAOuB,SAAP;AACK,8BAAiBA,SADtB;AAEEb,MAAO,gBAAMc,SAAN,CAAgBC,MAFzB;AAGEC,MAAO,gBAAMF,SAAN,CAAgBG,IAHzB;AAIEC,QAAS,gBAAMJ,SAAN,CAAgBG,IAJ3B;AAKEE,YAAa,gBAAML,SAAN,CAAgBG,IAL/B;AAMEG,QAAS,gBAAMN,SAAN,CAAgBG,IAN3B;AAOEI,OAAQ,gBAAMP,SAAN,CAAgBG,IAP1B;AAQEK,QAAS,gBAAMR,SAAN,CAAgBG,IAR3B;AASEM,KAAM,gBAAMT,SAAN,CAAgBG,IATxB;AAUEvB,SAAU,gBAAMoB,SAAN,CAAgBG,IAV5B;AAWEO,WAAY,gBAAMV,SAAN,CAAgBG,IAX9B;AAYEQ,SAAU,gBAAMX,SAAN,CAAgBG,IAZ5B;AAaEpB,QAAS,gBAAMiB,SAAN,CAAgBG,IAb3B;AAcES,MAAO,gBAAMZ,SAAN,CAAgBG,IAdzB;AAeEU,MAAO,gBAAMb,SAAN,CAAgBG,IAfzB;AAgBEW,OAAQ,gBAAMd,SAAN,CAAgBG,IAhB1B;AAiBEY,WAAY,gBAAMf,SAAN,CAAgBgB,MAjB9B;AAkBEC,gBAAiB,gBAAMjB,SAAN,CAAgBC,MAlBnC;;;AAqBAzB,OAAOS,YAAP,CAAsB;AACpByB,WAAY,IADQ,CAAtB;;;AAIA,GAAMQ,cAAe,yCAAa,mBAAb,CAAkC,EAAlC,iCAA4D1C,MAA5D,CAArB,C;;AAEkBA,M,CAAhB0C,Y","file":"Button.js","sourcesContent":["/* @flow */\n\nimport React, { Component } from 'react';\nimport { TouchableOpacity, Platform, View, TouchableNativeFeedback } from 'react-native';\nimport { connectStyle } from 'native-base-shoutem-theme';\nimport variables from './../theme/variables/platform';\nimport computeProps from '../Utils/computeProps';\n\nimport mapPropsToStyleNames from '../Utils/mapPropsToStyleNames';\n\nclass Button extends Component {\n\n  getInitialStyle() {\n    return {\n      borderedBtn: {\n        borderWidth: (this.props.bordered) ? 1 : undefined,\n        borderRadius: (this.props.rounded && this.props.bordered) ? variables.borderRadiusLarge : 2,\n      },\n    };\n  }\n\n  prepareRootProps() {\n    const defaultProps = {\n      style: this.getInitialStyle().borderedBtn,\n    };\n\n    return computeProps(this.props, defaultProps);\n  }\n  render() {\n    if (Platform.OS === 'ios' || variables.androidRipple === false || Platform.Version <= 21) {\n      return (\n        <TouchableOpacity\n          {...this.prepareRootProps()}\n          ref={(c) => { this._root = c; }}\n          activeOpacity={(this.props.activeOpacity) ? this.props.activeOpacity : 0.5}\n        >\n          {this.props.children}\n        </TouchableOpacity>\n      );\n    }\n    return (\n      <TouchableNativeFeedback\n        ref={(c) => { this._root = c; }}\n        onPress={this.props.onPress}\n        background={\n          (this.props.androidRippleColor) ?\n          TouchableNativeFeedback.Ripple(this.props.androidRippleColor)\n          :\n          TouchableNativeFeedback.Ripple(variables.androidRippleColor)}\n        {...this.prepareRootProps()}\n      >\n        <View {...this.prepareRootProps()}>\n            {this.props.children}\n        </View>\n      </TouchableNativeFeedback>\n    );\n  }\n}\n\nButton.propTypes = {\n  ...TouchableOpacity.propTypes,\n  style: React.PropTypes.object,\n  block: React.PropTypes.bool,\n  primary: React.PropTypes.bool,\n  transparent: React.PropTypes.bool,\n  success: React.PropTypes.bool,\n  danger: React.PropTypes.bool,\n  warning: React.PropTypes.bool,\n  info: React.PropTypes.bool,\n  bordered: React.PropTypes.bool,\n  capitalize: React.PropTypes.bool,\n  disabled: React.PropTypes.bool,\n  rounded: React.PropTypes.bool,\n  large: React.PropTypes.bool,\n  small: React.PropTypes.bool,\n  active: React.PropTypes.bool,\n  badgeColor: React.PropTypes.string,\n  badgeValueStyle: React.PropTypes.object,\n};\n\nButton.defaultProps = {\n  capitalize: true\n}\n\nconst StyledButton = connectStyle('NativeBase.Button', {}, mapPropsToStyleNames)(Button);\nexport {\n  StyledButton as Button,\n};\n"]}